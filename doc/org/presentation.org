#+TITLE: Clojure Presentation
#+AUTHOR: Andrew H
#+DATE: 2023-01-20 Fri
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_LINK_UP:
#+HTML_LINK_HOME:
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

* About Me
** About Me
*** Experience
    + Huntsville - 2010
    + UA Huntsville - Computer Science
    + 10 years - Developer
    + 07 years - Functional
    + 03 years - Clojurian

*** Functional Journey
    + Haskell -> Clojure -> Erlang/Elixir -> Haskell -> Clojure
* Clojure
** Clojure
*** Rationale
  #+BEGIN_QUOTE
Clojure is a robust, practical, and fast programming language and ecosystem with
a set of useful features that together form a simple, coherent, and powerful tool. -- Rich Hickey
  #+END_QUOTE

** History
   + Released 2007
   + BDFL - Rich Hickey
   + Wanted mainstream acceptability with much simpler programming model
   + Hosted
   + Functional Lisp

** JVM
   + Industry Standard
   + Direct Interop
   + Clojure libraries + Java libraries
   + Small core, extension via libraries

** Lisp
    + Common Lisp
    + Emacs Lisp
    + Scheme / Racket
   + S-expressions
   + () - list
   + (fn args) - list

** It's just data
   + data structures are code
   + code is data structures
   + literal
** Data Samples
#+begin_src clojure :results silent
  '(1 2 3 4) ;; list
  [1 2 3 4]  ;; vector
  #(1 2 3 4) ;; set
  {:one 1 :two 2 :three 3 :four 4} ;; hash map
#+end_src

#+begin_src json
"{"one":"1", "two":"2", "three":"3", "four":"4"}"
#+end_src

** Functional

#+begin_src clojure :results silent
  (* 1 4 5 6)
  (fn [x y] (+ x y))
  (def add-two (fn [x] (+ x 2))
  (defn add-two  [x] (+ x 2))
#+end_src

#+begin_src clojure :results pp
  {:one 1 :two 2 :three 3 :four 4}
#+end_src

#+begin_src clojure :results pp
  (def small-map {:a 2 :b 4 :c 8})
  (:b small-map)
#+end_src

** Literate Programming

** REPL driven development

| Editor    | REPL      |
|-----------+-----------|
| VSCode    | Calva     |
| Emacs     | Cider     |
| Neovim    | Fireplace |
| JetBrains | Cursive   |

** Clojure at Torch Technologies
*** Video Hub Engine / Scene Builder
*** UE4 remote control client

** Testing
  + Rich comments
  + Hyperfiddle/rcf

** Logging
  + Java interop
  + Timbre (Clojure only)

** Package Management
*** Leinengen
      + batteries included
    #+caption: From leiningen.org
    #+name: leiningen
    #+attr_latex: :width 25px
    [[../../resources/leiningen.jpg]]

*** Clojure CLI
    - official
*** Clojars

** Deployment
  + lein uberjar
  + CLI scripts

* Hosts

** Official

**** JVM
    + https://clojure.org

**** Javascript
    + https://clojurescript.org/

**** CLR
    + https://github.com/clojure/clojure-clr
    + ClojureCLR.Next
    + https://dmiller.github.io/clojure-clr-next/general/2023/01/06/clojureclr-reconsidered.html

** Unofficial

**** BEAM
    + https://github.com/clojerl/clojerl

**** Python
    + https://github.com/clj-python/libpython-clj

* Rich Hickey's Greatest Hits
** Greatest Hits
  + https://changelog.com/posts/rich-hickeys-greatest-hits
  + https://www.youtube.com/playlist?list=PLXsqD83He-e5oUh_DFrHbO3MoNj3tG8Vh
